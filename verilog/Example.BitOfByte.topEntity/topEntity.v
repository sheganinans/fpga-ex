/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module topEntity
    ( // Inputs
      input  clk // clock
    , input  rst // reset
    , input  en // enable
    , input [2:0] eta_0
    , input [7:0] eta_1

      // Outputs
    , output reg  result
    );
  reg [10:0] s1 = {3'd0,   8'd0};
  wire [2:0] x;
  reg  result_1;
  reg  c$case_alt;
  reg  c$case_alt_0;
  reg  result_2;
  reg  c$case_alt_1;
  reg  result_3;
  reg  c$case_alt_2;
  reg  result_4;
  reg  c$case_alt_3;
  reg  result_5;
  reg  c$case_alt_4;
  reg  result_6;
  reg  c$case_alt_5;
  reg  c$case_alt_6;
  wire [10:0] eta;
  wire [7:0] c$case_alt_selection_res;
  wire [7:0] c$case_alt_selection_res_2;
  wire [7:0] c$case_alt_selection_res_3;
  wire [7:0] c$case_alt_selection_res_4;
  wire [7:0] c$case_alt_selection_res_5;
  wire [7:0] c$case_alt_selection_res_6;
  wire [7:0] c$case_alt_selection_res_7;

  assign eta = {eta_0,   eta_1};

  // register begin
  always @(posedge clk or  posedge  rst) begin : s1_register
    if ( rst) begin
      s1 <= {3'd0,   8'd0};
    end else if (en) begin
      s1 <= eta;
    end
  end
  // register end

  assign x = s1[10:8];

  always @(*) begin
    case(x)
      3'd6 : result_1 = c$case_alt;
      default : result_1 = c$case_alt_0;
    endcase
  end

  assign c$case_alt_selection_res = 8'd2 & s1[7:0];

  always @(*) begin
    case(c$case_alt_selection_res)
      8'd2 : c$case_alt = 1'b1;
      default : c$case_alt = c$case_alt_0;
    endcase
  end

  always @(*) begin
    case(x)
      3'd7 : c$case_alt_0 = (8'd1 & s1[7:0]) == 8'd1;
      default : c$case_alt_0 = 1'b0;
    endcase
  end

  always @(*) begin
    case(x)
      3'd5 : result_2 = c$case_alt_1;
      default : result_2 = result_1;
    endcase
  end

  assign c$case_alt_selection_res_2 = 8'd4 & s1[7:0];

  always @(*) begin
    case(c$case_alt_selection_res_2)
      8'd4 : c$case_alt_1 = 1'b1;
      default : c$case_alt_1 = result_1;
    endcase
  end

  always @(*) begin
    case(x)
      3'd4 : result_3 = c$case_alt_2;
      default : result_3 = result_2;
    endcase
  end

  assign c$case_alt_selection_res_3 = 8'd8 & s1[7:0];

  always @(*) begin
    case(c$case_alt_selection_res_3)
      8'd8 : c$case_alt_2 = 1'b1;
      default : c$case_alt_2 = result_2;
    endcase
  end

  always @(*) begin
    case(x)
      3'd3 : result_4 = c$case_alt_3;
      default : result_4 = result_3;
    endcase
  end

  assign c$case_alt_selection_res_4 = 8'd16 & s1[7:0];

  always @(*) begin
    case(c$case_alt_selection_res_4)
      8'd16 : c$case_alt_3 = 1'b1;
      default : c$case_alt_3 = result_3;
    endcase
  end

  always @(*) begin
    case(x)
      3'd2 : result_5 = c$case_alt_4;
      default : result_5 = result_4;
    endcase
  end

  assign c$case_alt_selection_res_5 = 8'd32 & s1[7:0];

  always @(*) begin
    case(c$case_alt_selection_res_5)
      8'd32 : c$case_alt_4 = 1'b1;
      default : c$case_alt_4 = result_4;
    endcase
  end

  always @(*) begin
    case(x)
      3'd1 : result_6 = c$case_alt_5;
      default : result_6 = result_5;
    endcase
  end

  assign c$case_alt_selection_res_6 = 8'd64 & s1[7:0];

  always @(*) begin
    case(c$case_alt_selection_res_6)
      8'd64 : c$case_alt_5 = 1'b1;
      default : c$case_alt_5 = result_5;
    endcase
  end

  always @(*) begin
    case(x)
      3'd0 : result = c$case_alt_6;
      default : result = result_6;
    endcase
  end

  assign c$case_alt_selection_res_7 = 8'd128 & s1[7:0];

  always @(*) begin
    case(c$case_alt_selection_res_7)
      8'd128 : c$case_alt_6 = 1'b1;
      default : c$case_alt_6 = result_6;
    endcase
  end


endmodule

